image: maven:3-openjdk-11-slim

definitions:
  steps:
    - step: &setup-auth
        name: Configure auth
        image: atlassian/pipelines-awscli
        script:
          - echo export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain $AWS_CA_DOMAIN --domain-owner $AWS_CA_DO --query authorizationToken --output text` >> local.env
        artifacts:
          - local.env
    - step: &maven-verify
        caches:
          - maven
        name: Maven Verify
        script:
          - source local.env # requires: *setup-auth before this step to work
          - mvn verify -DskipTests -Djacoco.haltOnFailure=false -Dmaven.javadoc.skip=true -B -U -s .ci/settings.xml
        after-script:
          # Collect checkstyle results, if any, and convert to Bitbucket Code Insights.
          - pipe: atlassian/checkstyle-report:0.2.0
    - step: &maven-deploy-release
        caches:
          - maven
        name: Maven Deploy Release
        deployment: mvn-releases
        script:
          - source local.env # requires: *setup-auth step before this step to work
          - mvn deploy $DEPLOY_FLAGS -B -U -s .ci/settings.xml -DaltDeploymentRepository="maven-releases::$MVN_REPO_RELEASES"
    - step: &maven-deploy-snapshot
        caches:
          - maven
        name: Maven Deploy Snapshot
        deployment: mvn-snapshots
        script:
          - source local.env # requires: *setup-auth step before this step to work
          - mvn deploy $DEPLOY_FLAGS -B -U -s .ci/settings.xml -DaltSnapshotDeploymentRepository="maven-snapshots::$MVN_REPO_SNAPSHOTS"
    - step: &maven-deploy-feature
        caches:
          - maven
        name: Feature Deploy (Snapshot)
        deployment: mvn-features
        trigger: manual
        script:
          - source local.env # requires: *setup-auth step before this step to work
          - VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -B -U -s .ci/settings.xml)
          # since maven needs -SNAPSHOT at end to deploy as snapshot, dirty workaround!
          - NEW_VERSION=$(echo -n $VERSION | sed -e "s/\-SNAPSHOT/\.${BITBUCKET_BUILD_NUMBER}-SNAPSHOT/g") # 0.0.2.60-SNAPSHOT
          - mvn versions:set -DnewVersion=${NEW_VERSION} -DprocessAllModules=true -B -U -s .ci/settings.xml
          - mvn deploy $DEPLOY_FLAGS -B -U -s .ci/settings.xml -DaltSnapshotDeploymentRepository="maven-snapshots::$MVN_REPO_SNAPSHOTS"
    - step: &maven-pkg-image-artifacts
        name: Maven package with artifacts
        caches:
          - maven
        artifacts:
          - fiul-rest/fiul-rest-app/target/**
        script:
          - source local.env # requires: *setup-auth before this step to work
          - mvn package -Dmaven.javadoc.skip=true -DskipTests -B -U -s .ci/settings.xml
    - step: &lint-dockerfile
        name: Lint the Dockerfile
        image: hadolint/hadolint:latest-debian
        script:
          - hadolint docker/Dockerfile
    - step: &build-docker
        name: Build Docker Image
        script:
          - IMAGE_NAME=$BITBUCKET_REPO_SLUG
          - docker build . --file docker/dev.Dockerfile --tag ${IMAGE_NAME}
        services:
          - docker
        caches:
          - docker
    - step: &build-save-docker
        name: Build & save Docker image
        script:
          - IMAGE_NAME=$BITBUCKET_REPO_SLUG
          - docker build . --file docker/Dockerfile --tag ${IMAGE_NAME}
          - docker save ${IMAGE_NAME} --output "${IMAGE_NAME}.tar"
        services:
          - docker
        caches:
          - docker
        artifacts:
          - "*.tar"
    - step: &build-dev-docker
        name: Build & save Docker image
        trigger: manual
        script:
          - IMAGE_NAME=$BITBUCKET_REPO_SLUG
          - docker build . --file docker/dev.Dockerfile --tag ${IMAGE_NAME}
          - docker save ${IMAGE_NAME} --output "${IMAGE_NAME}.tar"
        services:
          - docker
        caches:
          - docker
        artifacts:
          - "*.tar"
    - step: &aws-ecr-push # requires docker image saved in previous step as *.tar
        name: Deploy docker image to AWS ECR
        oidc: true
        deployment: aws-ecr
        script:
          - IMAGE_NAME=$BITBUCKET_REPO_SLUG
          - docker load --input "${IMAGE_NAME}.tar"
          - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
          - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
          - pipe: "atlassian/aws-ecr-push-image:1.3.0"
            variables:
              AWS_OIDC_ROLE_ARN: $AWS_ROLE_ARN
              AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
              IMAGE_NAME: $IMAGE_NAME
              TAGS: '${BITBUCKET_TAG} latest'
        services:
          - docker
        caches:
          - docker
    - step: &branch-aws-ecr-push # requires docker image saved in previous step as *.tar
        name: Deploy docker image to AWS ECR
        trigger: manual
        oidc: true
        deployment: aws-ecr
        script:
          - IMAGE_NAME=$BITBUCKET_REPO_SLUG
          - docker load --input "${IMAGE_NAME}.tar"
          - export AWS_REGION=$AWS_DEFAULT_REGION
          - export AWS_ROLE_ARN=$AWS_ROLE_ARN
          - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
          - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
          - pipe: "atlassian/aws-ecr-push-image:1.3.0"
            variables:
              AWS_OIDC_ROLE_ARN: $AWS_ROLE_ARN
              AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
              IMAGE_NAME: $IMAGE_NAME
              TAGS: $BITBUCKET_BRANCH
        services:
          - docker
        caches:
          - docker
pipelines:
  pull-requests:
    feature/*:
      - step: *lint-dockerfile
      - step: *setup-auth
      - step: *maven-verify
      - step: *maven-pkg-image-artifacts
      - step: *build-docker # check if docker image builds properly
      - step: *maven-deploy-feature
    bugfix/*:
      - step: *lint-dockerfile
      - step: *setup-auth
      - step: *maven-verify
      - step: *maven-pkg-image-artifacts
      - step: *build-docker # check if docker image builds properly
      - step: *maven-deploy-feature 
  branches:
    main:
      - step: *lint-dockerfile
      - step: *setup-auth
      - step: *maven-pkg-image-artifacts
      - step: *build-save-docker
      - step: *branch-aws-ecr-push
      - step: *maven-deploy-release
    develop:
      - step: *lint-dockerfile
      - step: *setup-auth
      - step: *maven-pkg-image-artifacts
      - step: *maven-deploy-snapshot
      - step: *build-dev-docker
      - step:
          <<: *branch-aws-ecr-push
          deployment: aws-ecr-dev
  tags:
    v*:
      - step: *setup-auth
      - step: *maven-pkg-image-artifacts
      - step: *build-save-docker
      - step: *aws-ecr-push
